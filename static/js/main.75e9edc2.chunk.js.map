{"version":3,"sources":["Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","recipe","image","class","style","height","width","alt","label","totalWeight","calories","href","url","target","ingredientLines","map","each","index","key","App","useState","hits","setHits","title","setTitle","useEffect","getRecipes","a","fetch","response","json","data","console","log","onSubmit","e","preventDefault","placeholder","type","onChange","value","hit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kOAEe,SAASA,EAAKC,GACzB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAKF,EAAMG,OAAOA,OAAOC,MAC7BC,MAAM,oDACNC,MAAO,CAACC,OAAQ,IAAKC,MAAO,KAC5BC,IAAI,iBACL,yBAAKR,UAAU,aACX,wBAAIA,UAAU,cAAcD,EAAMG,OAAOA,OAAOO,OAChD,yBAAKT,UAAU,OACX,yBAAKA,UAAU,UAAf,iBACmBD,EAAMG,OAAOA,OAAOQ,aAEvC,yBAAKV,UAAU,UAAf,aACeD,EAAMG,OAAOA,OAAOS,UAEnC,yBAAKX,UAAU,UAAf,iBACkB,uBAAGY,KAAMb,EAAMG,OAAOA,OAAOW,IAAKC,OAAO,UAAzC,YADlB,UAMJ,6BAAK,6BACL,sDACA,6BACKf,EAAMG,OAAOA,OAAOa,gBAAgBC,KAAI,SAACC,EAAMC,GAC5C,OAAO,uBAAGC,IAAKD,GAAR,IAAiBD,EAAjB,aCgBhBG,MAzCf,WACE,IADa,EAGWC,mBAAS,IAHpB,mBAGNC,EAHM,KAGAC,EAHA,OAIaF,mBAAS,WAJtB,mBAING,EAJM,KAICC,EAJD,KAMbC,qBAAU,WACRC,MACC,IACH,IAAMA,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBATf,WASe,oBARd,qCAOG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBT,EAAQS,EAAKV,MAHI,2CAAH,qDAOhB,OADAW,QAAQC,IAAIZ,GAEV,yBAAKtB,UAAU,iBACb,6CACA,0BAAMA,UAAU,wCACdmC,SAAU,SAACC,GACTA,EAAEC,iBACFV,MAEF,2BAAO3B,UAAU,0BAChBsC,YAAY,cAAcC,KAAK,OAC/BC,SAAU,SAACJ,GAAD,OAAOX,EAASW,EAAEtB,OAAO2B,UACpC,4BAAQzC,UAAU,kCAAkCuC,KAAK,UAAzD,WAIF,6BACA,yBAAKvC,UAAU,aACVsB,EAAKN,KAAI,SAAC0B,EAAKxB,GAChB,OAAO,kBAACpB,EAAD,CAAMqB,IAAKD,EAAOhB,OAAQwC,UCzBvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.75e9edc2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Card(props) {\r\n    return (\r\n        <div className=\"card m-4 h-100\">\r\n            <img src={props.recipe.recipe.image}\r\n             class=\"img-thumbnail rounded-circle mx-auto d-block my-4\"\r\n             style={{height: 200, width: 200}}\r\n             alt=\"Recipe Image\"/>\r\n            <div className=\"card-body\">\r\n                <h3 className=\"card-title\">{props.recipe.recipe.label}</h3>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm\">\r\n                        Total weight: {props.recipe.recipe.totalWeight}\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                        Calories: {props.recipe.recipe.calories}\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                        Jump into the <a href={props.recipe.recipe.url} target=\"_blank\">\r\n                            tutorial\r\n                        </a> page\r\n                    </div>\r\n                </div>\r\n                <br/><br />\r\n                <h4> Ingredients required </h4>  \r\n                <div>\r\n                    {props.recipe.recipe.ingredientLines.map((each, index) => {\r\n                        return <p key={index}> {each} | </p>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Card from './Card'\nfunction App() {\n  const APP_ID = 'd491d5ca';\n  const APP_KEY = \"376e6f9fd4b388ea23286abbe142cd73\"\n  const [hits, setHits] = useState([]);\n  const [title, setTitle] = useState('chicken')\n\n  useEffect(() => {\n    getRecipes()\n  }, [])\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${title}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n    const data = await response.json();\n    setHits(data.hits)\n    \n  }\n  console.log(hits)\n  return (\n    <div className=\"App mx-4 my-5\">\n      <h1>Recipe Finder</h1>\n      <form className=\"form-group mx-sm-5 d-flex search-form\"\n        onSubmit={(e) => {\n          e.preventDefault()\n          getRecipes()\n        }}>\n        <input className=\"form-control search-bar\"\n         placeholder=\"Chicken ...\" type=\"text\"\n         onChange={(e) => setTitle(e.target.value)} />\n        <button className=\"btn ml-2 btn-primary search-btn\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <br />\n      <div className=\"container\">\n          {hits.map((hit, index) => {\n          return <Card key={index} recipe={hit} />\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}